/*
 * generated by Xtext 2.25.0
 */
package dk.sdu.mmmi.mdsd.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class DialogFlowGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class DialogFlowSystemElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mmmi.mdsd.DialogFlow.DialogFlowSystem");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSystemKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cDeclarationsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDeclarationsDeclarationParserRuleCall_2_0 = (RuleCall)cDeclarationsAssignment_2.eContents().get(0);
		
		//DialogFlowSystem:
		//    'system' name=ID declarations+=Declaration*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'system' name=ID declarations+=Declaration*
		public Group getGroup() { return cGroup; }
		
		//'system'
		public Keyword getSystemKeyword_0() { return cSystemKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//declarations+=Declaration*
		public Assignment getDeclarationsAssignment_2() { return cDeclarationsAssignment_2; }
		
		//Declaration
		public RuleCall getDeclarationsDeclarationParserRuleCall_2_0() { return cDeclarationsDeclarationParserRuleCall_2_0; }
	}
	public class DeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mmmi.mdsd.DialogFlow.Declaration");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIntentParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cEntityParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Declaration:
		//    Intent | Entity
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Intent | Entity
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Intent
		public RuleCall getIntentParserRuleCall_0() { return cIntentParserRuleCall_0; }
		
		//Entity
		public RuleCall getEntityParserRuleCall_1() { return cEntityParserRuleCall_1; }
	}
	public class IntentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mmmi.mdsd.DialogFlow.Intent");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIntentKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cPhraseAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPhrasePhrasesParserRuleCall_2_0 = (RuleCall)cPhraseAssignment_2.eContents().get(0);
		private final Assignment cResponseAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cResponseResponsesParserRuleCall_3_0 = (RuleCall)cResponseAssignment_3.eContents().get(0);
		private final Assignment cActionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cActionActionsParserRuleCall_4_0 = (RuleCall)cActionAssignment_4.eContents().get(0);
		
		//Intent:
		//    'intent' name=ID phrase=Phrases response=Responses (action=Actions)?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'intent' name=ID phrase=Phrases response=Responses (action=Actions)?
		public Group getGroup() { return cGroup; }
		
		//'intent'
		public Keyword getIntentKeyword_0() { return cIntentKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//phrase=Phrases
		public Assignment getPhraseAssignment_2() { return cPhraseAssignment_2; }
		
		//Phrases
		public RuleCall getPhrasePhrasesParserRuleCall_2_0() { return cPhrasePhrasesParserRuleCall_2_0; }
		
		//response=Responses
		public Assignment getResponseAssignment_3() { return cResponseAssignment_3; }
		
		//Responses
		public RuleCall getResponseResponsesParserRuleCall_3_0() { return cResponseResponsesParserRuleCall_3_0; }
		
		//(action=Actions)?
		public Assignment getActionAssignment_4() { return cActionAssignment_4; }
		
		//Actions
		public RuleCall getActionActionsParserRuleCall_4_0() { return cActionActionsParserRuleCall_4_0; }
	}
	public class PhrasesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mmmi.mdsd.DialogFlow.Phrases");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPhrasesAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cPhrasesKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cPhrasesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPhrasesPhraseValueParserRuleCall_2_0 = (RuleCall)cPhrasesAssignment_2.eContents().get(0);
		
		//Phrases:
		//    {Phrases} 'phrases' phrases+=PhraseValue* //require min 10 N's
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{Phrases} 'phrases' phrases+=PhraseValue*
		public Group getGroup() { return cGroup; }
		
		//{Phrases}
		public Action getPhrasesAction_0() { return cPhrasesAction_0; }
		
		//'phrases'
		public Keyword getPhrasesKeyword_1() { return cPhrasesKeyword_1; }
		
		//phrases+=PhraseValue*
		public Assignment getPhrasesAssignment_2() { return cPhrasesAssignment_2; }
		
		//PhraseValue
		public RuleCall getPhrasesPhraseValueParserRuleCall_2_0() { return cPhrasesPhraseValueParserRuleCall_2_0; }
	}
	public class PhraseValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mmmi.mdsd.DialogFlow.PhraseValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cValKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cQuotationMarkKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueSTRINGTerminalRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		private final Keyword cQuotationMarkKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//PhraseValue:
		//    'val' '"' value=STRING '"'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'val' '"' value=STRING '"'
		public Group getGroup() { return cGroup; }
		
		//'val'
		public Keyword getValKeyword_0() { return cValKeyword_0; }
		
		//'"'
		public Keyword getQuotationMarkKeyword_1() { return cQuotationMarkKeyword_1; }
		
		//value=STRING
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_2_0() { return cValueSTRINGTerminalRuleCall_2_0; }
		
		//'"'
		public Keyword getQuotationMarkKeyword_3() { return cQuotationMarkKeyword_3; }
	}
	public class ResponsesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mmmi.mdsd.DialogFlow.Responses");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cQuotationMarkKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cResponsesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cResponsesSTRINGTerminalRuleCall_1_0 = (RuleCall)cResponsesAssignment_1.eContents().get(0);
		private final Keyword cQuotationMarkKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cResponsesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cResponsesSTRINGTerminalRuleCall_3_1_0 = (RuleCall)cResponsesAssignment_3_1.eContents().get(0);
		
		//Responses:
		//    '"' responses+=STRING '"' (',' responses+=STRING)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'"' responses+=STRING '"' (',' responses+=STRING)*
		public Group getGroup() { return cGroup; }
		
		//'"'
		public Keyword getQuotationMarkKeyword_0() { return cQuotationMarkKeyword_0; }
		
		//responses+=STRING
		public Assignment getResponsesAssignment_1() { return cResponsesAssignment_1; }
		
		//STRING
		public RuleCall getResponsesSTRINGTerminalRuleCall_1_0() { return cResponsesSTRINGTerminalRuleCall_1_0; }
		
		//'"'
		public Keyword getQuotationMarkKeyword_2() { return cQuotationMarkKeyword_2; }
		
		//(',' responses+=STRING)*
		public Group getGroup_3() { return cGroup_3; }
		
		//','
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }
		
		//responses+=STRING
		public Assignment getResponsesAssignment_3_1() { return cResponsesAssignment_3_1; }
		
		//STRING
		public RuleCall getResponsesSTRINGTerminalRuleCall_3_1_0() { return cResponsesSTRINGTerminalRuleCall_3_1_0; }
	}
	public class ActionsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mmmi.mdsd.DialogFlow.Actions");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cActionsAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cActionsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cActionsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cActionsActionValueParserRuleCall_2_0 = (RuleCall)cActionsAssignment_2.eContents().get(0);
		
		//Actions:
		//     {Actions} 'actions' actions+=ActionValue*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{Actions} 'actions' actions+=ActionValue*
		public Group getGroup() { return cGroup; }
		
		//{Actions}
		public Action getActionsAction_0() { return cActionsAction_0; }
		
		//'actions'
		public Keyword getActionsKeyword_1() { return cActionsKeyword_1; }
		
		//actions+=ActionValue*
		public Assignment getActionsAssignment_2() { return cActionsAssignment_2; }
		
		//ActionValue
		public RuleCall getActionsActionValueParserRuleCall_2_0() { return cActionsActionValueParserRuleCall_2_0; }
	}
	public class ActionValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mmmi.mdsd.DialogFlow.ActionValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cValKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cTypeEntityCrossReference_2_0 = (CrossReference)cTypeAssignment_2.eContents().get(0);
		private final RuleCall cTypeEntityIDTerminalRuleCall_2_0_1 = (RuleCall)cTypeEntityCrossReference_2_0.eContents().get(1);
		private final Assignment cListAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cListSTRINGTerminalRuleCall_3_0 = (RuleCall)cListAssignment_3.eContents().get(0);
		
		//ActionValue:
		//    'val' name=ID type=[Entity] (list=STRING)?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'val' name=ID type=[Entity] (list=STRING)?
		public Group getGroup() { return cGroup; }
		
		//'val'
		public Keyword getValKeyword_0() { return cValKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//type=[Entity]
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//[Entity]
		public CrossReference getTypeEntityCrossReference_2_0() { return cTypeEntityCrossReference_2_0; }
		
		//ID
		public RuleCall getTypeEntityIDTerminalRuleCall_2_0_1() { return cTypeEntityIDTerminalRuleCall_2_0_1; }
		
		//(list=STRING)?
		public Assignment getListAssignment_3() { return cListAssignment_3; }
		
		//STRING
		public RuleCall getListSTRINGTerminalRuleCall_3_0() { return cListSTRINGTerminalRuleCall_3_0; }
	}
	public class EntityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mmmi.mdsd.DialogFlow.Entity");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEntityKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cEntitiesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cEntitiesEntityValueParserRuleCall_2_0 = (RuleCall)cEntitiesAssignment_2.eContents().get(0);
		
		//Entity:
		//    'entity'name=ID entities+=EntityValue*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'entity'name=ID entities+=EntityValue*
		public Group getGroup() { return cGroup; }
		
		//'entity'
		public Keyword getEntityKeyword_0() { return cEntityKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//entities+=EntityValue*
		public Assignment getEntitiesAssignment_2() { return cEntitiesAssignment_2; }
		
		//EntityValue
		public RuleCall getEntitiesEntityValueParserRuleCall_2_0() { return cEntitiesEntityValueParserRuleCall_2_0; }
	}
	public class EntityValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mmmi.mdsd.DialogFlow.EntityValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cValKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cQuotationMarkKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValuesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValuesSTRINGTerminalRuleCall_2_0 = (RuleCall)cValuesAssignment_2.eContents().get(0);
		private final Keyword cQuotationMarkKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cValuesAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cValuesSTRINGTerminalRuleCall_4_1_0 = (RuleCall)cValuesAssignment_4_1.eContents().get(0);
		
		//EntityValue:
		//    'val' '"' values+=STRING '"' (',' values+=STRING )*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'val' '"' values+=STRING '"' (',' values+=STRING )*
		public Group getGroup() { return cGroup; }
		
		//'val'
		public Keyword getValKeyword_0() { return cValKeyword_0; }
		
		//'"'
		public Keyword getQuotationMarkKeyword_1() { return cQuotationMarkKeyword_1; }
		
		//values+=STRING
		public Assignment getValuesAssignment_2() { return cValuesAssignment_2; }
		
		//STRING
		public RuleCall getValuesSTRINGTerminalRuleCall_2_0() { return cValuesSTRINGTerminalRuleCall_2_0; }
		
		//'"'
		public Keyword getQuotationMarkKeyword_3() { return cQuotationMarkKeyword_3; }
		
		//(',' values+=STRING )*
		public Group getGroup_4() { return cGroup_4; }
		
		//','
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }
		
		//values+=STRING
		public Assignment getValuesAssignment_4_1() { return cValuesAssignment_4_1; }
		
		//STRING
		public RuleCall getValuesSTRINGTerminalRuleCall_4_1_0() { return cValuesSTRINGTerminalRuleCall_4_1_0; }
	}
	
	
	private final DialogFlowSystemElements pDialogFlowSystem;
	private final DeclarationElements pDeclaration;
	private final IntentElements pIntent;
	private final PhrasesElements pPhrases;
	private final PhraseValueElements pPhraseValue;
	private final ResponsesElements pResponses;
	private final ActionsElements pActions;
	private final ActionValueElements pActionValue;
	private final EntityElements pEntity;
	private final EntityValueElements pEntityValue;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public DialogFlowGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pDialogFlowSystem = new DialogFlowSystemElements();
		this.pDeclaration = new DeclarationElements();
		this.pIntent = new IntentElements();
		this.pPhrases = new PhrasesElements();
		this.pPhraseValue = new PhraseValueElements();
		this.pResponses = new ResponsesElements();
		this.pActions = new ActionsElements();
		this.pActionValue = new ActionValueElements();
		this.pEntity = new EntityElements();
		this.pEntityValue = new EntityValueElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("dk.sdu.mmmi.mdsd.DialogFlow".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//DialogFlowSystem:
	//    'system' name=ID declarations+=Declaration*
	//;
	public DialogFlowSystemElements getDialogFlowSystemAccess() {
		return pDialogFlowSystem;
	}
	
	public ParserRule getDialogFlowSystemRule() {
		return getDialogFlowSystemAccess().getRule();
	}
	
	//Declaration:
	//    Intent | Entity
	//;
	public DeclarationElements getDeclarationAccess() {
		return pDeclaration;
	}
	
	public ParserRule getDeclarationRule() {
		return getDeclarationAccess().getRule();
	}
	
	//Intent:
	//    'intent' name=ID phrase=Phrases response=Responses (action=Actions)?
	//;
	public IntentElements getIntentAccess() {
		return pIntent;
	}
	
	public ParserRule getIntentRule() {
		return getIntentAccess().getRule();
	}
	
	//Phrases:
	//    {Phrases} 'phrases' phrases+=PhraseValue* //require min 10 N's
	//;
	public PhrasesElements getPhrasesAccess() {
		return pPhrases;
	}
	
	public ParserRule getPhrasesRule() {
		return getPhrasesAccess().getRule();
	}
	
	//PhraseValue:
	//    'val' '"' value=STRING '"'
	//;
	public PhraseValueElements getPhraseValueAccess() {
		return pPhraseValue;
	}
	
	public ParserRule getPhraseValueRule() {
		return getPhraseValueAccess().getRule();
	}
	
	//Responses:
	//    '"' responses+=STRING '"' (',' responses+=STRING)*
	//;
	public ResponsesElements getResponsesAccess() {
		return pResponses;
	}
	
	public ParserRule getResponsesRule() {
		return getResponsesAccess().getRule();
	}
	
	//Actions:
	//     {Actions} 'actions' actions+=ActionValue*
	//;
	public ActionsElements getActionsAccess() {
		return pActions;
	}
	
	public ParserRule getActionsRule() {
		return getActionsAccess().getRule();
	}
	
	//ActionValue:
	//    'val' name=ID type=[Entity] (list=STRING)?
	//;
	public ActionValueElements getActionValueAccess() {
		return pActionValue;
	}
	
	public ParserRule getActionValueRule() {
		return getActionValueAccess().getRule();
	}
	
	//Entity:
	//    'entity'name=ID entities+=EntityValue*
	//;
	public EntityElements getEntityAccess() {
		return pEntity;
	}
	
	public ParserRule getEntityRule() {
		return getEntityAccess().getRule();
	}
	
	//EntityValue:
	//    'val' '"' values+=STRING '"' (',' values+=STRING )*
	//;
	public EntityValueElements getEntityValueAccess() {
		return pEntityValue;
	}
	
	public ParserRule getEntityValueRule() {
		return getEntityValueAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
