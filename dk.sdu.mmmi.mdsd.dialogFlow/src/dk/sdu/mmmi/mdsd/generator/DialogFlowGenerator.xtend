/*
 * generated by Xtext 2.25.0
 */
package dk.sdu.mmmi.mdsd.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import dk.sdu.mmmi.mdsd.dialogFlow.DialogFlowSystem
import dk.sdu.mmmi.mdsd.dialogFlow.SystemList
import dk.sdu.mmmi.mdsd.dialogFlow.Entity
import dk.sdu.mmmi.mdsd.dialogFlow.Intent
import org.eclipse.emf.common.util.EList

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class DialogFlowGenerator extends AbstractGenerator {

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		
		for(currentSystem: resource.allContents.toIterable.filter(DialogFlowSystem)){
			val decl = currentSystem.declarations
			val base = currentSystem.base
			val rootElementCreator = new RootElementCreator(currentSystem.name)
			rootElementCreator.generateElements(currentSystem, fsa)
			val entityCreator = new EntityCreator(currentSystem.name)
			val intentCreator = new IntentCreator(currentSystem.name)

			if(base !== null) {
				loopSuperSystems(base, entityCreator, intentCreator, fsa)
			}
			
			for (i : 0 ..< decl.size) {
				val element = decl.get(i)
				println(element instanceof Entity)
				if(element instanceof Entity) {
					entityCreator.generateEntity(element, fsa)
				} else if(element instanceof Intent) {
					intentCreator.generateIntent(element, fsa)
				}
			}
		
		}
		
	}
	
	def addSuperThings(DialogFlowSystem base, EntityCreator entityCreator, IntentCreator intentCreator, IFileSystemAccess2 fsa) {
		val superDecl = base.declarations
		for (j : 0 ..< superDecl.size) {
			val element = superDecl.get(j)
			if(element instanceof Entity) {
				entityCreator.generateEntity(element, fsa)
			} else if(element instanceof Intent) {
				intentCreator.generateIntent(element, fsa)
			}
		}
	}
	
	def loopSuperSystems(EList<DialogFlowSystem> systems, EntityCreator entityCreator, IntentCreator intentCreator, IFileSystemAccess2 fsa) {
		for(i : 0 ..< systems.size) {
			val superSystem =  systems.get(i)
			if(superSystem.base !== null) {
				loopSuperSystems(superSystem.base, entityCreator, intentCreator, fsa)
			}
			addSuperThings(superSystem, entityCreator, intentCreator, fsa)
		}
	}	
}
